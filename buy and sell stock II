//   R E C U R S I O N

// class Solution {
// public:
//     int solve(vector<int> &p,int n,int index,int buy)
//     {
//         if(index==n)return 0;
        
//         int profit=0;
//         if(buy==1)
//         {
//             profit=max( (-p[index]+solve(p,n,index+1,0))
//                    , solve(p,n,index+1,1) );
//         }
//         else
//             profit=max((p[index]+solve(p,n,index+1,1))
//                       ,solve(p,n,index+1,0));
        
//         return profit;
//     }
//     int maxProfit(vector<int>& price) {
//         int n=price.size();
//         return solve(price,n,0,1);
//     }
// };


// M E M O I Z A T I O N ðŸ˜¢

// class Solution {
// public:
//     int solve(vector<int> &p,int n,int index,int buy,vector<vector<int>> &dp)
//     {
//         if(index==n)return 0;
        
//         if(dp[index][buy]!=-1)
//             return dp[index][buy];
        
//         int profit=0;
//         if(buy==1)
//         {
//             profit=max( (-p[index]+solve(p,n,index+1,0,dp) )
//                        , solve(p,n,index+1,1,dp) );
//         }
//         else
//             profit=max((p[index]+solve(p,n,index+1,1,dp))
//                       ,solve(p,n,index+1,0,dp));
        
//         return dp[index][buy]=profit;
//     }
//     int maxProfit(vector<int>& price) {
//         int n=price.size();
//         vector<vector<int>> dp(n+1,vector<int>(2,-1));
//         return solve(price,n,0,1,dp);
//     }
// };



class Solution {
public:

//     int maxProfit(vector<int>& price) {
//         int n=price.size();
//         vector<vector<int>> dp(n+1,vector<int>(2,0));
        
//         for(int index=n-1;index>=0;index--)
//         {
//             for(int buy=0;buy<2;buy++)
//             {
//                 if(buy==1)
//                 {
//                     dp[index][buy]= max((-price[index]+dp[index+1][0] )
//                        , dp[index+1][1] );
//                 }
//                 else
//                 {
//                     dp[index][buy]= max((price[index]+dp[index+1][1] )
//                        , dp[index+1][0] );
//                 }
//             }
//         }
        
//         return dp[0][1];
//     }
     int maxProfit(vector<int>& price) {
        int n=price.size();
        int nextbuy=0;
        int nextnotbuy=0;
         
         int curbuy=0;
         int curnotbuy=0;
        
        for(int index=n-1;index>=0;index--)
        {
           
                    curbuy= max((-price[index]+ nextnotbuy )
                       , nextbuy);
               
                    curnotbuy= max((price[index]+nextbuy )
                       , nextnotbuy );
            
                    nextbuy=curbuy;
                   nextnotbuy=curnotbuy;
        }
        
        return nextbuy;
    }
};



